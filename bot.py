import os
import discord
import requests
import pytesseract
from PIL import Image
from io import BytesIO
from discord.ext import commands

# L·∫•y Token t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
DISCORD_TOKEN = os.getenv("DISCORD_POESKILL_BOT_TOKEN")  # Token bot Discord
CHATGPT_API_KEY = os.getenv("CHATGPT_API_KEY")  # API Key c·ªßa ChatGPT

# ID c·ªßa k√™nh ƒë∆∞·ª£c ph√©p bot ho·∫°t ƒë·ªông
ALLOWED_CHANNEL_ID = 1337203470167576607  # C·∫≠p nh·∫≠t Channel ID c·ªßa b·∫°n

# Thi·∫øt l·∫≠p intents cho bot
intents = discord.Intents.default()
intents.message_content = True

# Kh·ªüi t·∫°o bot v·ªõi prefix "!"
bot = commands.Bot(command_prefix="!", intents=intents)

@bot.event
async def on_ready():
    print(f'‚úÖ POESkill Bot ƒë√£ k·∫øt n·ªëi v·ªõi Discord! Logged in as {bot.user}')

@bot.event
async def on_message(message):
    """X·ª≠ l√Ω tin nh·∫Øn v√† nh·∫≠n di·ªán Skill t·ª´ ·∫£nh"""
    if message.author == bot.user or message.channel.id != ALLOWED_CHANNEL_ID:
        return

    # X·ª≠ l√Ω ·∫£nh n·∫øu c√≥ ·∫£nh ƒë√≠nh k√®m
    if message.attachments:
        await process_image(message, message.attachments[0])

    await bot.process_commands(message)

async def process_image(message, attachment):
    """Tr√≠ch xu·∫•t th√¥ng tin Skill t·ª´ ·∫£nh v√† g·ª≠i truy v·∫•n ƒë·∫øn ChatGPT"""
    try:
        img_url = attachment.url
        response = requests.get(img_url)
        img = Image.open(BytesIO(response.content))

        # S·ª≠ d·ª•ng Tesseract OCR ƒë·ªÉ tr√≠ch xu·∫•t vƒÉn b·∫£n
        extracted_text = pytesseract.image_to_string(img)
        print(f"üîç OCR Extracted Text: {extracted_text}")  # Debugging

        if extracted_text.strip():
            # G·ª≠i truy v·∫•n ƒë·∫øn ChatGPT ƒë·ªÉ l·∫•y th√¥ng tin b·∫±ng ti·∫øng Vi·ªát
            translated_info = get_skill_info_from_chatgpt(extracted_text)
            await message.channel.send(f"üìù **Th√¥ng tin v·ªÅ Skill (Ti·∫øng Vi·ªát):**\n{translated_info}")
        else:
            await message.channel.send("‚ö†Ô∏è Kh√¥ng th·ªÉ tr√≠ch xu·∫•t th√¥ng tin t·ª´ ·∫£nh. H√£y th·ª≠ ·∫£nh kh√°c!")

    except Exception as e:
        await message.channel.send(f"‚ùå L·ªói x·ª≠ l√Ω ·∫£nh: {str(e)}")

def get_skill_info_from_chatgpt(skill_text):
    """G·ª≠i truy v·∫•n ƒë·∫øn ChatGPT API v√† l·∫•y c√¢u tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát"""
    try:
        headers = {
            "Authorization": f"Bearer {CHATGPT_API_KEY}",
            "Content-Type": "application/json",
        }
        payload = {
            "model": "gpt-4",
            "messages": [{"role": "user", "content": f"D·ªãch v√† gi·∫£i th√≠ch k·ªπ nƒÉng n√†y t·ª´ Path of Exile sang ti·∫øng Vi·ªát: {skill_text}"}],
            "temperature": 0.7,
        }

        response = requests.post("https://api.openai.com/v1/chat/completions", json=payload, headers=headers)

        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ö†Ô∏è L·ªói khi truy v·∫•n ChatGPT API: {response.text}"

    except Exception as e:
        return f"‚ùå L·ªói x·ª≠ l√Ω API: {str(e)}"

bot.run(DISCORD_TOKEN)
